var documenterSearchIndex = {"docs":
[{"location":"#MITgcmTools.jl-1","page":"Home","title":"MITgcmTools.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Set of tools for the analysis, manipulation, etc of  MITgcm  input and output files.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [MITgcmTools]","category":"page"},{"location":"#MITgcmTools.MatrixInterp-Union{Tuple{N}, Tuple{T}, Tuple{Array{T,N},SparseArrays.SparseMatrixCSC,Any}} where N where T","page":"Home","title":"MITgcmTools.MatrixInterp","text":"MatrixInterp(in::Array{T,N},MTRX,siz) where {T,N}\n\nInterpolate in using MTRX to grid of size siz.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.MetaFileRead-Tuple{String}","page":"Home","title":"MITgcmTools.MetaFileRead","text":"MetaFileRead(filIn::String)\n\nReads a meta file generated by MITgcm\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.convert2array-Tuple{MeshArrays.gcmarray}","page":"Home","title":"MITgcmTools.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.convert2gcmfaces-Tuple{MeshArrays.gcmarray}","page":"Home","title":"MITgcmTools.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.findtiles-Tuple{Int64,Int64,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.parsemeta-Tuple{Any}","page":"Home","title":"MITgcmTools.parsemeta","text":"parsemeta(metafile)\n\nParse out an MITgcm metadata file and return a Dict of fields in the file.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.prep_MTRX-Tuple{}","page":"Home","title":"MITgcmTools.prep_MTRX","text":"prep_MTRX()\n\nRepackage interpolation matrix, mask, etc to .jld file.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.qwckplot-Tuple{MeshArrays.gcmarray,String}","page":"Home","title":"MITgcmTools.qwckplot","text":"qwckplot(fld::MeshArray,ttl::String)\n\nPlot input using convert2array and heatmap + add title\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.qwckplot-Tuple{MeshArrays.gcmarray,Tuple{Number,Number}}","page":"Home","title":"MITgcmTools.qwckplot","text":"qwckplot(fld::MeshArray,clims::NTuple{2, Number})\n\nPlot input using convert2array and heatmap w. chosen clims\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.qwckplot-Tuple{MeshArrays.gcmarray}","page":"Home","title":"MITgcmTools.qwckplot","text":"qwckplot(fld::MeshArray)\n\nCall qwckplot(fld::MeshArray) with date as title. Example:\n\n!isdir(\"GRID_LLC90\") ? error(\"missing files\") : nothing\nGridVariables=GridLoad(GridSpec(\"LLC90\"))\nqwckplot(GridVariables[\"Depth\"])\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.readAvailDiagnosticsLog-Tuple{Any,Any}","page":"Home","title":"MITgcmTools.readAvailDiagnosticsLog","text":"readAvailDiagnosticsLog(fname,fldname)\n\nGet the information for a particular field from the available_diagnostics.log     file (MITgcm output).\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_SPM-Tuple{String}","page":"Home","title":"MITgcmTools.read_SPM","text":"read_SPM(dirIn::String)\n\nReads pre-computed interpolation (sparse matrix) from dirIn*\"interp_precomputed.mat\".\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_bin-Tuple{String,Union{Missing, Int64},Union{Missing, Int64},DataType,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_nctiles-Tuple{String,String,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid)\n\nRead model output from NCTiles file and convert to MeshArray instance.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"method"}]
}
