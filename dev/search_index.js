var documenterSearchIndex = {"docs":
[{"location":"#MITgcmTools.jl-1","page":"Home","title":"MITgcmTools.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Set of tools for the analysis, manipulation, etc of  MITgcm  input and output files.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [MITgcmTools]","category":"page"},{"location":"#MITgcmTools.MatrixInterp-Union{Tuple{N}, Tuple{T}, Tuple{Array{T,N},SparseArrays.SparseMatrixCSC,Any}} where N where T","page":"Home","title":"MITgcmTools.MatrixInterp","text":"MatrixInterp(in::Array{T,N},MTRX,siz) where {T,N}\n\nInterpolate in using MTRX to grid of size siz.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.MixedLayerDepth-Union{Tuple{T}, Tuple{Array{T,1},Array{T,1},Array{T,1},String}} where T","page":"Home","title":"MITgcmTools.MixedLayerDepth","text":"MixedLayerDepth(Θ,Σ,Δ,mthd)\n\nCompute mixed layer depth from potential temperature (Θ in °C), salinity (Σ in psu) and depth (Δ in method) according to various formulas (mthd == \"BM\", \"Suga\", \"Kara\"). Inputs must be dense vectors without any missing value (or NaN, etc).\n\nD=collect(0.0:1.0:500.0); tmp=(1.0.-tanh.(5*(-1 .+ 2/D[end]*D)));\nT=2.0 .+ 8.0*tmp; S=34.0 .+ 0.5*tmp;\n(ρP,ρI,ρR) = SeaWaterDensity(T,S,D);\n\nmld=MixedLayerDepth(T,S,D,\"BM\"); isapprox(mld,134.0)\n\nusing Plots\nplot(ρP,-D,w=2,label=\"Potential Density\",ylabel=\"Depth\")\nplot!(vec([ρP[1] ρP[end]]),-fill(mld,2),label=\"Mixed Layer Depth\",w=2,c=\"black\",s=:dash)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.SeaWaterDensity","page":"Home","title":"MITgcmTools.SeaWaterDensity","text":"SeaWaterDensity(Θ,Σ,Π,Π0)\n\nCompute potential density (ρP), in situ density (ρI), and density referenced to PREF (Π0 in decibars) from potential temperature (Θ in °C), salinity (Σ in psu) and pressure (Π in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron Reference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf Check value: ρI = 1041.83267kg/m^3 for Θ=3°Celcius, Σ=35psu, Π=3000dbar\n\n(ρP,ρI,ρR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ρI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.convert2array-Tuple{MeshArrays.gcmarray}","page":"Home","title":"MITgcmTools.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.convert2gcmfaces-Tuple{MeshArrays.gcmarray}","page":"Home","title":"MITgcmTools.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.findtiles-Tuple{Int64,Int64,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_available_diagnostics-Tuple{String}","page":"Home","title":"MITgcmTools.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the  available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_bin-Tuple{String,Union{Missing, Int64},Union{Missing, Int64},DataType,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_flt-Tuple{String,DataType}","page":"Home","title":"MITgcmTools.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_mdsio-Tuple{Any}","page":"Home","title":"MITgcmTools.read_mdsio","text":"read_mdsio(datafile)\n\nRead a MITgcm mdsio file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_mdsio-Tuple{String,String}","page":"Home","title":"MITgcmTools.read_mdsio","text":"read_mdsio(pth::String,fil::String)\n\nRead a MITgcm's MDSIO files (\".data\" binary + \".meta\" text pair), combine, and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_meta-Tuple{Any}","page":"Home","title":"MITgcmTools.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTyple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_meta-Tuple{String,String}","page":"Home","title":"MITgcmTools.read_meta","text":"read_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTyple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"method"},{"location":"#MITgcmTools.read_nctiles-Tuple{String,String,MeshArrays.gcmgrid}","page":"Home","title":"MITgcmTools.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid)\n\nRead model output from NCTiles file and convert to MeshArray instance.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"method"}]
}
