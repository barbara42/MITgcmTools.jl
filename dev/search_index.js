var documenterSearchIndex = {"docs":
[{"location":"functionalities/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MITgcmTools.jl provides a suite of tools for running MITgcm, analyzing its output, and/or modifying its inputs.","category":"page"},{"location":"functionalities/#Running-MITgcm","page":"Manual","title":"Running MITgcm","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The recommended, simple, method to run the model is via the climate model interface (see the ClimateModels.jl interface section and  docs@ClimateModels.jl for detail). The MITgcm_launch function can be used to run a MITgcm configuration after setting up the MITgcm_config. Using this interface facilitates operations like compiling and setting up a temporary folder to run the model. Key functions, incl. the climate model interface, are documented further down in the docs. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The verification_experiments function provides a list of the most-standard MITgcm configurations that can all be run either in batch mode or interactively. The MITgcm_path variable points to where MITgcm is compiled. Interactive / reactive notebooks are found in the examples/ folder (e.g. run_MITgcm.jl  seen just below). ","category":"page"},{"location":"functionalities/#Model-Configurations","page":"Manual","title":"Model Configurations","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The verification_experiments() function provides a list of the most-standard MITgcm configurations that can all be run either in batch mode or interactively using MITgcmTools.jl. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The MITgcm_path variable points to where MITgcm is compiled. Interactive / reactive notebooks are found in the examples/ folder (e.g. MITgcm_run.jl  seen just below). ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MITgcm_path\nverification_experiments\nscan_rundir","category":"page"},{"location":"functionalities/#MITgcmTools.verification_experiments","page":"Manual","title":"MITgcmTools.verification_experiments","text":"verification_experiments()\n\nGet list of all most-standard configurations of MITgcm and return as an Array of MITgcm_config\n\nusing MITgcmTools\nexps=verification_experiments()\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.scan_rundir","page":"Manual","title":"MITgcmTools.scan_rundir","text":"scan_rundir(pth::String)\n\nScan a MITgcm run directory and standard output text file  (\"output.txt\" or \"STDOUT.0000\") and return a NamedTuple of collected information (various formats)\n\nInitially, the output looked like (grid=gr,packages=pac,params_time=par1,params_grid=par2,completed=co)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Main-Functionalities","page":"Manual","title":"Main Functionalities","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"functionalities/#ClimateModels.jl-interface","page":"Manual","title":"ClimateModels.jl interface","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MITgcm_config\nbuild\ncompile \nsetup\nMITgcm_launch\nclean","category":"page"},{"location":"functionalities/#MITgcmTools.MITgcm_config","page":"Manual","title":"MITgcmTools.MITgcm_config","text":"MITgcm_config()\n\nConcrete type of AbstractModelConfig for MITgcm which contains\n\n    model :: String = \"MITgcm\"\n    configuration :: String = \"\"\n    options :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    inputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    outputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    status :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    channel :: Channel{Any} = Channel{Any}(10) \n    folder :: String = tempdir()\n    ID :: UUID = UUIDs.uuid4()\n\nand with defaults that can be constructed as follows for example\n\nusing MITgcmTools\ntmp=MITgcm_config()\n\nexps=verification_experiments()\nexps[end]\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"type"},{"location":"functionalities/#ClimateModels.build","page":"Manual","title":"ClimateModels.build","text":"build(config::MITgcm_config)\n\nBuild the model using genmake2, make depend, and make. The first two link all  code files, headers, etc  in the build/ folder before compiling the model\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\nbuild(config::MITgcm_config,options::String)\n\nBuild the model using genmake2, make depend, and make unless otherwise specified via options. The genmake2 and make depend commands link all  code files, headers, etc  in the build/ folder before make compiles the model.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.compile","page":"Manual","title":"ClimateModels.compile","text":"compile(config::MITgcm_config)\n\nCompile the model using make in build/ that has already been setup.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.setup","page":"Manual","title":"ClimateModels.setup","text":"setup(config::MITgcm_config)\n\nCreate a run/ folder and link everything there as needed to be ready to run model as  normally done for most-standard MITgcm configurations (incl. prepare_run and mitgcmuv). Call git_log_init(config) to setup git tracker and put!(config.channel,MITgcm_launch)  to be executed via launch(config) later.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.MITgcm_launch","page":"Manual","title":"MITgcmTools.MITgcm_launch","text":"MITgcm_launch(config::MITgcm_config)\n\nGo to run/ folder and effectively call mitgcmuv > output.txt\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.clean","page":"Manual","title":"ClimateModels.clean","text":"clean(config::MITgcm_config)\n\nCancel any remaining task (config.channel) and clean up the run directory (via rm).\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Reading-MITgcm-Files","page":"Manual","title":"Reading MITgcm Files","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"read_mdsio\nread_meta\nread_mnc\nGridLoad_mdsio\nGridLoad_mnc","category":"page"},{"location":"functionalities/#MITgcmTools.read_mdsio","page":"Manual","title":"MITgcmTools.read_mdsio","text":"read_mdsio(datafile)\n\nRead a MITgcm mdsio file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\nread_mdsio(pth::String,fil::String)\n\nRead a MITgcm's MDSIO files (\".data\" binary + \".meta\" text pair), combine, and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.read_meta","page":"Manual","title":"MITgcmTools.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\nread_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.read_mnc","page":"Manual","title":"MITgcmTools.read_mnc","text":"read_mnc(pth::String,fil::String,var::String)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.GridLoad_mdsio","page":"Manual","title":"MITgcmTools.GridLoad_mdsio","text":"GridLoad_mdsio(myexp::MITgcm_config)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.GridLoad_mnc","page":"Manual","title":"MITgcmTools.GridLoad_mnc","text":"GridLoad_mnc(Î³::gcmgrid)\n\n\n\n\n\nGridLoad_mnc(myexp::MITgcm_config)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"read_available_diagnostics\nread_bin\nread_flt\nread_nctiles","category":"page"},{"location":"functionalities/#MITgcmTools.read_available_diagnostics","page":"Manual","title":"MITgcmTools.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the  available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.read_bin","page":"Manual","title":"MITgcmTools.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.read_flt","page":"Manual","title":"MITgcmTools.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.read_nctiles","page":"Manual","title":"MITgcmTools.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid)\n\nRead model output from NCTiles file and convert to MeshArray instance.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"function"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MITgcm_namelist\nread_namelist\nwrite_namelist","category":"page"},{"location":"functionalities/#MITgcmTools.MITgcm_namelist","page":"Manual","title":"MITgcmTools.MITgcm_namelist","text":"MITgcm_namelist(groups,params)\n\nData structure representing a MITgcm namelist file, such as data.pkg, which contains \n\n    groups :: Array{Symbol,1} = Array{Symbol,1}(undef, 0)\n    params :: Array{OrderedDict{Symbol,Any},1} = Array{OrderedDict{Symbol,Any},1}(undef, 0)\n\nwith model parameters (params) being organized in groups as done in the files.\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nMITgcm_namelist(nml.groups,nml.params)\nMITgcm_namelist(groups=nml.groups,params=nml.params)\nMITgcm_namelist(groups=nml.groups)\n\n\n\n\n\n","category":"type"},{"location":"functionalities/#MITgcmTools.read_namelist","page":"Manual","title":"MITgcmTools.read_namelist","text":"read_namelist(fil)\n\nRead a MITgcm namelist file, parse it, and return as a NamedTuple\n\nusing MITgcmTools\ntestreport(\"advect_xy\")\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnamelist=read_namelist(fil)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.write_namelist","page":"Manual","title":"MITgcmTools.write_namelist","text":"write_namelist(fil)\n\nSave a MITgcm namelist file. In the example below, one is read from file, modified, and then saved to a new file using write_namelist.\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nwrite_namelist(fil*\"_new\",namelist)\n\nor \n\nnml=read(fil,MITgcm_namelist())\nwrite(fil*\"_new\",nml)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Format-conversions","page":"Manual","title":"Format conversions","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"findtiles\ncube2compact\ncompact2cube\nconvert2array\nconvert2gcmfaces","category":"page"},{"location":"functionalities/#MITgcmTools.findtiles","page":"Manual","title":"MITgcmTools.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.cube2compact","page":"Manual","title":"MITgcmTools.cube2compact","text":"cube2compact(x::Array)\n\nReshape from e.g. size (192, 32, 5) in cube format to (32, 192, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.compact2cube","page":"Manual","title":"MITgcmTools.compact2cube","text":"compact2cube(x::Array)\n\nReshape from e.g. size (32, 192, 5) in cube format to (192, 32, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.convert2array","page":"Manual","title":"MITgcmTools.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.convert2gcmfaces","page":"Manual","title":"MITgcmTools.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Formulae-etc","page":"Manual","title":"Formulae etc","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"SeaWaterDensity\nMixedLayerDepth","category":"page"},{"location":"functionalities/#MITgcmTools.SeaWaterDensity","page":"Manual","title":"MITgcmTools.SeaWaterDensity","text":"SeaWaterDensity(Î,Î£,Î ,Î 0)\n\nCompute potential density (ÏP), in situ density (ÏI), and density referenced to PREF (Î 0 in decibars) from potential temperature (Î in Â°C), salinity (Î£ in psu) and pressure (Î  in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron Reference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf Check value: ÏI = 1041.83267kg/m^3 for Î=3Â°Celcius, Î£=35psu, Î =3000dbar\n\n(ÏP,ÏI,ÏR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ÏI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#MITgcmTools.MixedLayerDepth","page":"Manual","title":"MITgcmTools.MixedLayerDepth","text":"MixedLayerDepth(Î,Î£,Î,mthd)\n\nCompute mixed layer depth from potential temperature (Î in Â°C), salinity (Î£ in psu) and depth (Î in method) according to various formulas (mthd == \"BM\", \"Suga\", \"Kara\"). Inputs must be dense vectors without any missing value (or NaN, etc).\n\nD=collect(0.0:1.0:500.0); tmp=(1.0.-tanh.(5*(-1 .+ 2/D[end]*D)));\nT=2.0 .+ 8.0*tmp; S=34.0 .+ 0.5*tmp;\n(ÏP,ÏI,ÏR) = SeaWaterDensity(T,S,D);\n\nmld=MixedLayerDepth(T,S,D,\"BM\"); isapprox(mld,134.0)\n\nusing Plots\nplot(ÏP,-D,w=2,label=\"Potential Density\",ylabel=\"Depth\")\nplot!(vec([ÏP[1] ÏP[end]]),-fill(mld,2),label=\"Mixed Layer Depth\",w=2,c=\"black\",s=:dash)\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"To load one of the notebooks using Pluto.jl: ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"open julia in terminal window\ntype the following commands at the Julia prompt\nin web-browser, open one of the notebooks listed hereafter","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"cd(\"examples/\")\nusing Pluto\nPluto.run()","category":"page"},{"location":"examples/#Examples-/-Running-Models","page":"Examples","title":"Examples / Running Models","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"MITgcm_configurations.jl : explore MITgcm configurations and their parameters.\nMITgcm_worklow.jl : build, setup, run, and plot for any standard configuration.\nrun_MITgcm.jl : a more detailed look into compiling and running the model.","category":"page"},{"location":"examples/#Examples-/-Analyzing-Results","page":"Examples","title":"Examples / Analyzing Results","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"MITgcm_scan_output.jl : scan output.txt, read grid, viz with Makie.jl \nHS94_plotmap.jl : read hs94.cs-32x32x5 output, interpolate, and plot map\nHS94_particles.jl : compute particle trajectories from hs94.cs-32x32x5 output\nHS94_Makie.jl : example using Makie.jl instead of Plots.jl","category":"page"},{"location":"#MITgcmTools.jl","page":"Home","title":"MITgcmTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for using MITgcm or analyzing its output. This includes compiling, running a model configuration, or inspecting inputs and outputs. The ClimateModels.jl interface provides a standard framework for such workflows. ","category":"page"},{"location":"#Main-Features","page":"Home","title":"Main Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read Model Output And Files\nStandard MITgcm configurations\nClimate Model Interface\nExamples (notebooks in examples/)","category":"page"},{"location":"#main-contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"functionalities.md\",\n    \"examples.md\",\n]\nDepth = 3","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Simulated particles from HS94 on cube sphere grid)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: The impossible MITgcm rendering)","category":"page"}]
}
