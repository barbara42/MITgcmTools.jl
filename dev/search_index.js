var documenterSearchIndex = {"docs":
[{"location":"#MITgcmTools.jl","page":"Home","title":"MITgcmTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Set of tools for running MITgcm, analyzing its results, and preparing model inputs. Examples are provided in test/runtests.jl as well as in examples/run_MITgcm.jl, monitor_run.jl, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Simulated particles from HS94 on cube sphere grid)","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Explore-And-Run-MITgcm","page":"Home","title":"Explore And Run MITgcm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The MITgcm_path variable provides the path to the MITgcm folder being used. The MITgcm_launch function can be used to run a MITgcm configuration either directly or (recommended) using the climate model interface (see ClimateModels.jl). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interactive / reactive notebooks (see Pluto.jl) are found in the examples/ folder (e.g. run_MITgcm.jl  depicted below). The verification_experiments function provides a list of the most-standard MITgcm configurations that can all be run in such fashion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Compiling and running MITgcm)","category":"page"},{"location":"","page":"Home","title":"Home","text":"MITgcm_config\nMITgcm_namelist\nclean\ncompile \nsetup\nMITgcm_launch\ntestreport\nverification_experiments","category":"page"},{"location":"#MITgcmTools.MITgcm_config","page":"Home","title":"MITgcmTools.MITgcm_config","text":"MITgcm_config\n\nusing MITgcmTools\nexps=verification_experiments()\nexps[end]\n\n\n\n\n\n","category":"type"},{"location":"#MITgcmTools.MITgcm_namelist","page":"Home","title":"MITgcmTools.MITgcm_namelist","text":"MITgcm_namelist\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path,\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nMITgcm_namelist(nml.groups,nml.params)\nMITgcm_namelist(groups=nml.groups,params=nml.params)\nMITgcm_namelist(groups=nml.groups)\n\n\n\n\n\n","category":"type"},{"location":"#ClimateModels.clean","page":"Home","title":"ClimateModels.clean","text":"clean(config::MITgcm_config)\n\nCancel any remaining task (config.channel), clean up the build  directory (via testreport), and clean the run directory (via rm).\n\n\n\n\n\n","category":"function"},{"location":"#ClimateModels.compile","page":"Home","title":"ClimateModels.compile","text":"compile(config::MITgcm_config)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.MITgcm_launch","page":"Home","title":"MITgcmTools.MITgcm_launch","text":"MITgcm_launch(config::MITgcm_config)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.testreport","page":"Home","title":"MITgcmTools.testreport","text":"testreport(nam::String,ext=\"\")\n\nRun the testreport script for one model config nam (or \"all\"), with additional options (optional) speficied in ext\n\nusing MITgcmTools\ntestreport(MITgcm_config(configuration=\"front_relax\"),\"-norun\")\n#testreport(MITgcm_config(configuration=\"all\"),\"-norun\")\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.verification_experiments","page":"Home","title":"MITgcmTools.verification_experiments","text":"verification_experiments()\n\nexps=verification_experiments()\n\n\n\n\n\n","category":"function"},{"location":"#Reading-MITgcm-outputs","page":"Home","title":"Reading MITgcm outputs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_mdsio\nread_meta\nread_namelist\nwrite_namelist\nread_available_diagnostics\nread_bin\nread_flt\nread_nctiles","category":"page"},{"location":"#MITgcmTools.read_mdsio","page":"Home","title":"MITgcmTools.read_mdsio","text":"read_mdsio(datafile)\n\nRead a MITgcm mdsio file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\nread_mdsio(pth::String,fil::String)\n\nRead a MITgcm's MDSIO files (\".data\" binary + \".meta\" text pair), combine, and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_meta","page":"Home","title":"MITgcmTools.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\nread_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_namelist","page":"Home","title":"MITgcmTools.read_namelist","text":"read_namelist(fil)\n\nRead a MITgcm namelist file, parse it, and return as a NamedTuple\n\nusing MITgcmTools\ntestreport(\"advect_xy\")\nfil=joinpath(MITgcm_path,\"verification\",\"advect_xy\",\"run\",\"data\")\nnamelist=read_namelist(fil)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.write_namelist","page":"Home","title":"MITgcmTools.write_namelist","text":"write_namelist(fil)\n\nSave a MITgcm namelist file. In the example below, one is read from file, modified, and then saved to a new file using write_namelist.\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path,\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nwrite_namelist(fil*\"_new\",namelist)\n\nor \n\nnml=read(fil,MITgcm_namelist())\nwrite(fil*\"_new\",nml)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_available_diagnostics","page":"Home","title":"MITgcmTools.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the  available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_bin","page":"Home","title":"MITgcmTools.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_flt","page":"Home","title":"MITgcmTools.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.read_nctiles","page":"Home","title":"MITgcmTools.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid)\n\nRead model output from NCTiles file and convert to MeshArray instance.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"function"},{"location":"#Format-conversions","page":"Home","title":"Format conversions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: The impossible MITgcm rendering)","category":"page"},{"location":"","page":"Home","title":"Home","text":"findtiles\ncube2compact\ncompact2cube\nconvert2array\nconvert2gcmfaces","category":"page"},{"location":"#MITgcmTools.findtiles","page":"Home","title":"MITgcmTools.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.cube2compact","page":"Home","title":"MITgcmTools.cube2compact","text":"cube2compact(x::Array)\n\nReshape from e.g. size (192, 32, 5) in cube format to (32, 192, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.compact2cube","page":"Home","title":"MITgcmTools.compact2cube","text":"compact2cube(x::Array)\n\nReshape from e.g. size (32, 192, 5) in cube format to (192, 32, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.convert2array","page":"Home","title":"MITgcmTools.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.convert2gcmfaces","page":"Home","title":"MITgcmTools.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"#Formulae-etc","page":"Home","title":"Formulae etc","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SeaWaterDensity\nMixedLayerDepth","category":"page"},{"location":"#MITgcmTools.SeaWaterDensity","page":"Home","title":"MITgcmTools.SeaWaterDensity","text":"SeaWaterDensity(Θ,Σ,Π,Π0)\n\nCompute potential density (ρP), in situ density (ρI), and density referenced to PREF (Π0 in decibars) from potential temperature (Θ in °C), salinity (Σ in psu) and pressure (Π in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron Reference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf Check value: ρI = 1041.83267kg/m^3 for Θ=3°Celcius, Σ=35psu, Π=3000dbar\n\n(ρP,ρI,ρR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ρI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"#MITgcmTools.MixedLayerDepth","page":"Home","title":"MITgcmTools.MixedLayerDepth","text":"MixedLayerDepth(Θ,Σ,Δ,mthd)\n\nCompute mixed layer depth from potential temperature (Θ in °C), salinity (Σ in psu) and depth (Δ in method) according to various formulas (mthd == \"BM\", \"Suga\", \"Kara\"). Inputs must be dense vectors without any missing value (or NaN, etc).\n\nD=collect(0.0:1.0:500.0); tmp=(1.0.-tanh.(5*(-1 .+ 2/D[end]*D)));\nT=2.0 .+ 8.0*tmp; S=34.0 .+ 0.5*tmp;\n(ρP,ρI,ρR) = SeaWaterDensity(T,S,D);\n\nmld=MixedLayerDepth(T,S,D,\"BM\"); isapprox(mld,134.0)\n\nusing Plots\nplot(ρP,-D,w=2,label=\"Potential Density\",ylabel=\"Depth\")\nplot!(vec([ρP[1] ρP[end]]),-fill(mld,2),label=\"Mixed Layer Depth\",w=2,c=\"black\",s=:dash)\n\n\n\n\n\n","category":"function"}]
}
